version: "3.8"

services:
  postgres:
    image: postgres:15
    container_name: crypto_postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: crypto_news
    volumes:
      - postgres_data:/var/lib/postgresql/data

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LISTENERS: "PLAINTEXT://:29092,PLAINTEXT_HOST://:9092"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DELETE_TOPIC_ENABLE: "true"

  crawler:
    build:
      context: ./Crypto-Crawler
    container_name: crypto_crawler
    restart: always
    depends_on:
      - postgres
      - kafka
    environment:
      DATABASE_URL: postgres://postgres:testpass@crypto_postgres:5432/crypto_news
      KAFKA_BROKER_URL: kafka:9093
    command: >
      sh -c "
      until pg_isready -h crypto_postgres -p 5432 -U postgres; do
        echo 'Waiting for Postgres...';
        sleep 3;
      done;
      python generateDB.py &&
      python crypto-data-generator-2.py &&
      python main.py &&
      python sentiment.py &&
      python poller.py
      "
    volumes:
      - shared_data:/tmp

  backend:
    build:
      context: ./Crypto-Backend
    container_name: crypto_backend
    restart: always
    depends_on:
      - crawler
    ports:
      - "8004:8000"  # Expose backend on port 8004
    environment:
      DATABASE_URL: postgres://postgres:testpass@crypto_postgres:5432/crypto_news
    volumes:
      - shared_data:/tmp

  frontend:
    build:
      context: ./Crypto-Frontend
    container_name: crypto_frontend
    restart: always
    ports:
      - "3003:3000"  # Expose frontend on port 3003

volumes:
  postgres_data:
  shared_data:
